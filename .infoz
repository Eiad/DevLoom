
npm run build
npm run electron-pack

git commit -m "Update"
git push -u origin master
vercel --prod


======
1-I have code formatter Next.js app

2-i use prettier

3-below is 2 related files for formatting langauges

<Script formatterContent.js>
import React, { useState, useEffect } from "react";
import Prism from "prismjs";
import "prismjs/themes/prism-okaidia.css";
import "prismjs/components/prism-javascript";
import "prismjs/components/prism-json";
import "prismjs/components/prism-cshtml";
import "prismjs/components/prism-css";
import "prismjs/components/prism-less";
import Footer from "../Footer";

function FormatterContent(props) {
  const {
    inputCode,
    handleInputChange,
    formatCode,
    formattedCode,
    codeType,
    formatOption,
    setFormatOption, // New prop
  } = props;

  const [isCopied, setIsCopied] = useState(false);
  const [showOutput, setShowOutput] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const highlightedCode = Prism.highlight(
    String(formattedCode),
    Prism.languages[codeType.toLowerCase()],
    codeType.toLowerCase()
  );

  useEffect(() => {
    setShowOutput(!!formattedCode);
  }, [formattedCode]);

  const handleFormatClick = () => {
    setIsProcessing(true);
    setTimeout(() => {
      setIsProcessing(false);
      formatCode();
    }, 500);
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(formattedCode).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000); // Reset after 2 seconds
    });
  };

  return (
    <>
      <div className="main-body">
        <div className="formatter-page">
          <h1 className="text-center">{codeType} Formatter</h1>

          {/* New Dropdown for Format Options */}
          <div className="format-options">
            <label htmlFor="formatOption">Indentation level: </label>
            <select
              id="formatOption"
              value={formatOption}
              onChange={(e) => setFormatOption(e.target.value)}
            >
              <option value="1tab">1 Tab</option>
              <option value="2spaces">2 Spaces</option>
              <option value="4spaces">4 Spaces</option>
              <option value="no-Spaces">no-Spaces</option>
            </select>
          </div>

          <div className="input-section text-center">
            <textarea
              value={inputCode}
              onChange={handleInputChange}
              placeholder={`Copy-paste your ${codeType} here...`}
            />
          </div>

          {/* Button is disabled if textarea is empty or if it is processing */}
          <button
            onClick={handleFormatClick}
            disabled={!inputCode || isProcessing}
          >
            {isProcessing ? "Processing..." : `Format ${codeType}`}
          </button>

          {showOutput && (
            <div
              className={`output-section ${
                isProcessing ? "process-output" : ""
              }`}
            >
              <div className="output-content">
                <h2 className="text-center">Formatted Output</h2>
                <div className="pre-container">
                  <pre className={`language-${codeType.toLowerCase()}`}>
                    <code
                      className={`language-${codeType.toLowerCase()}`}
                      dangerouslySetInnerHTML={{ __html: highlightedCode }}
                    />
                  </pre>
                  <button onClick={handleCopy}>
                    {isCopied ? "Copied!" : "Click to Copy"}
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
}

export default FormatterContent;

</Script formatterContent.js>


<Script JSFormatter.js>
import React, { useState } from "react";

import * as prettier from "prettier/standalone";
import * as babelParser from "prettier/parser-babel";
import * as prettierEstree from "prettier/plugins/estree"; // Added the estree plugin
import FormatterContent from "./formatterContent"; // Import the component

function JSFormatter() {
  const [inputCode, setInputCode] = useState("");
  const [formattedCode, setFormattedCode] = useState("");
  const [formatOption, setFormatOption] = useState("2spaces");

  const handleInputChange = (event) => {
    setInputCode(event.target.value);
  };

  const formatJSCode = () => {
    let tabWidth = 2;
    let useTabs = false;

    switch (formatOption) {
      case "1tab":
        tabWidth = 1;
        useTabs = true;
        break;
      case "2spaces":
        tabWidth = 2;
        break;
      case "4spaces":
        tabWidth = 4;
        break;
      case "no-Space":
        tabWidth = 0; // Using zero for full no spaces
        break;
      default:
        break;
    }

    try {
      const formatOptions = {
        parser: "babel",
        plugins: [babelParser, prettierEstree],
        tabWidth: formatOption === "no-Spaces" ? 0 : tabWidth,
        useTabs: formatOption === "no-Spaces" ? false : useTabs,
        printWidth: formatOption === "no-Spaces" ? 10000 : 80,
        semi: formatOption !== "no-Spaces", // No semicolons for no-Spaces
        singleQuote: false,
        bracketSpacing: formatOption !== "no-Spaces",
      };

      const formatted = prettier.format(inputCode, formatOptions);

      if (formatted instanceof Promise) {
        formatted.then((result) => {
          setFormattedCode(result);
        });
      } else {
        setFormattedCode(formatted);
      }
    } catch (error) {
      alert(
        "There was an error formatting your code. Please check and try again."
      );
    }
  };

  return (
    <FormatterContent
      inputCode={inputCode}
      handleInputChange={handleInputChange}
      formatCode={formatJSCode}
      formattedCode={formattedCode}
      codeType="JavaScript"
      formatOption={formatOption}
      setFormatOption={setFormatOption}
    />
  );
}

export default JSFormatter;

</Script JSFormatter.js>





0-remind yourself with our conversion exchange.
1-give meta title and description and page hero title description and  for both formatters we did. use the example below as inspiration.
2-give the exact format below for Typescript and GrapghQL we just did

      <Head>
        <title>
          DevLoom Online Free JavaScript Formatter - Optimize Your JavaScript
          Coding
        </title>
        <meta
          name="description"
          content="Improve your JavaScript coding with DevLoom JavaScript Formatter. Effortless code beautification and formatting designed for JavaScript."
        />
      </Head>
      <div className="top-section">
        <h1>DevLoom JavaScript Formatter - Optimize Your JavaScript Coding</h1>
        <p>
          Optimize your JavaScript coding with DevLoom&#39;s JavaScript
          Formatter. Experience effortless code beautification and formatting
          designed specifically for JavaScript. Give it a try and elevate your
          coding!
        </p>
        <p className="get-started">No ads - No Trackers - No Bullshit ;)</p>
      </div>